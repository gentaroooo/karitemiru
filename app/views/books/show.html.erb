<div class="container pt-5">
  <div class="row mb-3">
    <div class="col-lg-8 offset-lg-2">
      <h1><%= t('.title') %></h1>
      <!-- 掲示板内容 -->
      <div class="card mb-4 p-3">
        <div class="row g-0">
          <div class="col-5">
            <%= image_tag @book.image_link.blank? ? 'sample.jpeg' : @book.image_link, class: 'img-fluid border' %>
          </div>
          <div class="col-7">
            <div class="card-body">
              <h5 class="card-title"><%= @book.title %></h5>
              <p class="card-text mb-2"><%= @book.authors.pluck(:name).join(', ')&.truncate(50) %></p>
              <p class="card-text"><small class="text-muted"><%= @book.published_date %></small></p>
              <%= link_to '詳細を見る', @book.info_link, target: '_blank' %>
            </div>
          </div>
          <% if current_user.own?(@book) %> 
            <ul class='crud-menu-btn list-inline float-right'>
              <li class="list-inline-item">
                <%= link_to book_path(@book), id: "button-delete-#{@book.id}",
                 method: :delete, data: { confirm: t('defaults.message.delete_confirm') } do %>
                  <%= icon 'fas', 'trash' %>
                <% end %>
              </li>
            </ul>
          <% end %>
        </div>
      </div>
      
      <article class="card">
        <div class="card-body">
          <div class='row'>
            <div class='col-md-9'>
              <%= @library.name%>貸出情報
              <p id="kensaku"><button type="button" class="btn btn-secondary">検索中</button></p>
              <p id="choice"></p>
              <p id="choice2"></p>
    
              <script>
                    function promiseFactory(count) {
                      return new Promise((resolve, reject) => {
                         timer_id = setTimeout(() => {
                            count++;
                            console.log(`${count}回目のコールです。時刻：[${new Date().toTimeString()}]`);
                            //本の貸出情報をGETリクエストする
                            $.ajax({
                              type: 'GET',
                              url: 'https://api.calil.jp/check',
                              data:{
                                appkey: "<%= ENV['APP_KEY'] %>",
                                isbn: Number("<%= @book.systemid %>"),
                                systemid: "<%= @library.name %>",
                              },
                              dataType: 'jsonp',
                              jsonp: 'callback',
                            })

                            // 成功した場合dataにJSONを格納
                            .done(function(data){
                              console.log(data)
                              // JSONから図書館、貸出情報を取得してsituationに代入
                              const situation = data.books[Number("<%= @book.systemid %>")].<%= @library.name %>.libkey

                              const reserveurl = data.books[Number("<%= @book.systemid %>")].<%= @library.name %>.reserveurl

                              console.log(situation)
                              console.log(reserveurl)
                              // data.continueが0だった場合
                              if (data.continue === 0) {
                                console.log("取得に成功")
                                // situationからひとづつ値を取り出してvalueに代入
                                Object.keys(situation).forEach( function(value) {
                                  //kensakuに値があれば削除からひとづつ値を取り出してvalueに代入
                                  $("#kensaku").remove();
                                  //choiceにvalue（図書館名）、this[value](貸出情報)を出力
                                  $("#choice").prepend(`<div>
                                  <button type="button" class="btn btn-success">${value} : ${this[value]}</button>
                                  </div>`)
                                }, situation)

                                $("#choice2").prepend(`<div>
                                  <button type="button" class="btn btn-outline-info"><a href="${reserveurl}">予約する</a></button>
                                  </div>`)

                                //data.continueが0だった場合にループ（setTimeout）を抜ける
                                clearTimeout( timer_id );

                              //data.continueが0だった場合は3回リトライをする 
                              } else {
                                // 3回目のコールでエラー
                                if (count === 3 ) {
                                reject(count);
                                } else {
                                resolve(count);
                                }
                              }
                            })

                            //https://api.calil.jp/checkへのGETに失敗した場合
                            .fail(function(data){
                              $("#jsonp").append("エラーです");
                            });

                        }, 2000);
                      });
                    }
                        async function execute() { // awaitを内部で使っているためasyncをつける
                          try {
                              // promiseFactory内のresolveが呼び出されるまで次の処理を実行しない
                              //awaitによってresolveの引数の値がcountに代入される
                              let count = await promiseFactory(0);
                              count = await promiseFactory(count);
                              count = await promiseFactory(count);
                              count = await promiseFactory(count);
                          } catch (errorCount) {
                              // Promiseがrejectedのステータスになった場合はcatchブロックに遷移する
                              console.error(`エラーに飛びました。現在のカウントは ${errorCount} です。`);
                          } finally {
                              console.log("処理を終了します。");
                          }
                      }
                      // execute()の実行
                      execute();
              </script>   
            </div>
          </div>
        </div>
      </article>
    </div>
  </div>
</div>